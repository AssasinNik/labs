version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app_net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app_net
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 10

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - app_net
    environment:
      - NEO4J_AUTH=none
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7474" ]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app_net
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=mydb
    ports:
      - "5433:5432"
    networks:
      - app_net
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 10
  python-script:
    build: ./python-script
    container_name: python-script
    depends_on:
      - redis
      - mongo
      - neo4j
      - elasticsearch
      - postgres
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - app_net
    command: sh -c "
      echo 'Проверка готовности баз данных...';
      wait-for-it postgres:5432 --timeout=0 &&
      wait-for-it mongo:27017 --timeout=0 &&
      wait-for-it redis:6379 --timeout=0 &&
      wait-for-it neo4j:7687 --timeout=0 &&
      wait-for-it elasticsearch:9200 --timeout=0 &&
      echo 'Все БД готовы. Запуск скрипта...';
      python ./generate_data.py"

  lab_1:
    build: .
    container_name: lab1
    depends_on:
      - redis
      - mongo
      - neo4j
      - elasticsearch
      - postgres
    ports:
      - "8081:8081"
    networks:
      - app_net
    command: sh -c "sleep 20 && java -jar /app/lab_1-0.0.1-SNAPSHOT.jar"

  lab_2:
    build: ../lab_2
    container_name: lab2
    depends_on:
      - redis
      - mongo
      - neo4j
      - elasticsearch
      - postgres
    ports:
      - "8082:8082"
    networks:
      - app_net
    command: sh -c "sleep 20 && java -jar /app/lab_2-0.0.1-SNAPSHOT.jar"

  lab_3:
    build: ../lab_3
    container_name: lab3
    depends_on:
      - redis
      - mongo
      - neo4j
      - elasticsearch
      - postgres
    ports:
      - "8083:8083"
    networks:
      - app_net
    command: sh -c "sleep 20 && java -jar /app/lab_3-0.0.1-SNAPSHOT.jar"

  gateway:
    build: ../gateway
    container_name: gateway
    depends_on:
      - lab_1
      - lab_2
      - lab_3
    ports:
      - "8080:8080"
    networks:
      - app_net
    command: sh -c "java -jar /app/gateway-0.0.1-SNAPSHOT.jar"

volumes:
  redis-data:
  mongo-data:
  neo4j-data:
  neo4j-logs:
  elasticsearch-data:
  postgres-data:

networks:
  app_net:
    name: app_net
    driver: bridge